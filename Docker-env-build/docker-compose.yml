version: '3'
services:
  mongo:
    image: mongo
    container_name: mongodb
    hostname: mongodb
    restart: always
    expose:
      - "6016" 
    ports:
      - "27017:27017"
    volumes:
      - ./mongodb:/data/db

  adminmongo:
    image: mrvautin/adminmongo
    container_name: adminmongo
    hostname: adminmongo
    ports:
      - "1234:1234"
    environment:
      - HOST=0.0.0.0

  jupyter:
    build:
      context: ./dockerfile
      dockerfile: dockerfile-jupyter
    container_name: jupyter
    hostname: jupyter
    restart: unless-stopped
    ports:
      - "8888:8888"
    command: start-notebook.sh --NotebookApp.token=''
    volumes:
      - ./jupyter:/home/jovyan/work
  
  hadoop:
    image: orozcohsu/ha-sp-zo-hi-fl-rs-ma-sq:v1
    container_name: hadoop
    hostname: master
    expose:
      - "50070"
      - "9000"
      - "8080"
    ports:
      - "8080:8080"
      - "50070:50070"
      - "9000:9000"
      - "2222:22"
      - "28080:28080"
      - "18080:18080"
      - "10000:10000"
      - "10002:10002"
      - "9083:9083"
      - "3306:3306"
    volumes:
      - /tmp/docker-cluster-hadoop-name/:/data/dfs/name/
      - /tmp/docker-cluster-hadoop-data/:/data/dfs/data/
      - /tmp/docker-cluster-hadoop-logs/:/usr/local/hadoop/logs/
      - /tmp/docker-cluster-zookeeper-logs/:/var/log/zookeeper/
      - /tmp/docker-cluster-zeppelin-logs/:/usr/local/zeppelin/log
    environment:
      - "NODE_TYPE=master"

  zookeeper:
    image: confluentinc/cp-zookeeper:5.2.1
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:5.2.1
    container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT

  restproxy:
    image: confluentinc/cp-kafka-rest:5.2.1
    container_name: restproxy
    hostname: restproxy
    depends_on:
      - kafka
    restart: always
    ports:
      - 8082:8082
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082
      KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KAFKA_REST_HOST_NAME: restproxy
      KAFKA_REST_DEBUG: "true"

  ksql-server:
    image: confluentinc/cp-ksql-server
    container_name: ksql-server
    depends_on:
      - kafka
    ports:
      - "8089:8089"
    environment:
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_LISTENERS: "http://0.0.0.0:8089"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"

  ksql-cli:
    image: confluentinc/cp-ksql-cli
    container_name: ksql-cli
    depends_on:
      - kafka
      - ksql-server
    entrypoint: /bin/sh
    tty: true

  schema-registry:
    image: confluentinc/cp-schema-registry:5.2.1
    container_name: schema-registry
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
