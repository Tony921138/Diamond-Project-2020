version: '3'
services:
  mongo:
    image: mongo
    container_name: mongodb
    hostname: mongodb
    restart: always
    expose:
      - 6016
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=user
    volumes:
      - ./mongodb:/data/db

  adminmongo:
    image: mrvautin/adminmongo
    container_name: adminmongo
    hostname: adminmongo
    ports:
      - 1234:1234
    environment:
      - HOST=0.0.0.0

  jupyter:
    build:
      context: ./dockerfile
      dockerfile: dockerfile-jupyter
    container_name: jupyter
    hostname: jupyter
    restart: unless-stopped
    ports:
      - 8888:8888
      - 5000:5000
    user: root
    volumes:
      - ./jupyter_data:/home/jovyan/work
    working_dir: /home/user/project
    environment:
      - NB_USER=user
      - NB_GID=1000
      - CHOWN_HOME=yes
      - CHOWN_HOME_OPTS=-R
  
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - ./hadoop/hadoop_namenode:/hadoop/dfs/name
      - ./hadoop_data:/user_data
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop_env/hadoop.env

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-datanode
    restart: always
    volumes:
      - ./hadoop/hadoop_datanode:/hadoop/dfs/data
    environment:
      - SERVICE_PRECONDITION=namenode:9870
    env_file:
      - ./hadoop_env/hadoop.env
  
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: yarn-resourcemanager
    restart: always
    ports:
      - 8088:8088
    environment:
      - SERVICE_PRECONDITION=namenode:9870 namenode:9000 datanode:9864
    env_file:
      - ./hadoop_env/hadoop.env

  nodemanager:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: yarn-nodemanager
    restart: always
    environment:
      - SERVICE_PRECONDITION=namenode:9870 namenode:9000 datanode:9864 resourcemanager:8088
    env_file:
      - ./hadoop_env/hadoop.env
  
  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: yarn-historyserver
    restart: always
    environment:
      - SERVICE_PRECONDITION=namenode:9870 namenode:9000 datanode:9864 resourcemanager:8088
    volumes:
      - ./hadoop/yarn_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop_env/hadoop.env
  
  spark-master:
    image: tonytony0123/spark-master:3.0.0-hadoop3.2
    container_name: spark-master
    hostname: spark-master
    ports:
      - 8080:8080
      - 7077:7077
    volumes:
      - ./spark_data:/user_data
    environment:
      - INIT_DAEMON_STEP=setup_spark
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    depends_on:
      - namenode
      - datanode
    working_dir: /spark/bin
               
  spark-worker-1:
    image: tonytony0123/spark-worker:3.0.0-hadoop3.2
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - 8081:8081
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      
  spark-worker-2:
    image: tonytony0123/spark-worker:3.0.0-hadoop3.2
    container_name: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - 8082:8081
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
   
  spark-worker-3:
    image: tonytony0123/spark-worker:3.0.0-hadoop3.2
    container_name: spark-worker-3
    depends_on:
      - spark-master
    ports:
      - 8083:8081
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
     
  zookeeper:
    image: confluentinc/cp-zookeeper:5.2.1
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - 2181:2181
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000

  kafka:
    image: confluentinc/cp-kafka:5.2.1
    container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      ## for local use
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      ## for public use
      #KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://<host_ip>:9092
      #advertised.host.name: <host_ip>
  
  mysql:
    build:
      context: ./dockerfile
      dockerfile: dockerfile-mysql
    container_name: mysql
    hostname: mysql
    restart: always
    ports:
      - 3306:3306
    volumes:
      - ./mysql_data:/user_data
      - ./mysql:/var/lib/mysql
    environment:
      - MYSQL_DATABASE=project
      - MYSQL_USER=user
      - MYSQL_PASSWORD=user
      - MYSQL_ROOT_PASSWORD=root
      
  mysql-workbench:
    image: linuxserver/mysql-workbench:latest
    container_name: mysql-workbench
    restart: unless-stopped
    ports:
      - 3000:3000
    cap_add:
      - IPC_LOCK
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Taipei

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.8.0
    container_name: es01
    hostname: es01
    restart: unless-stopped
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - ./elk_data/es/es01_data:/usr/share/elasticsearch/data
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
        
  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.8.0
    container_name: es02
    restart: unless-stopped
    volumes:
      - ./elk_data/es/es02_data:/usr/share/elasticsearch/data
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
        
  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.8.0
    container_name: es03
    restart: unless-stopped
    volumes:
      - ./elk_data/es/es03_data:/usr/share/elasticsearch/data
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1

  logstash:
    image: docker.elastic.co/logstash/logstash-oss:7.8.0
    container_name: logstash
    hostname: logstash
    depends_on:
      - es01
    restart: always
    ports:
      - 5001:5000/udp
      - 5001:5000/tcp
      - 9600:9600
    volumes:
      - ./elk_data/ls/ls_config:/usr/share/logstash/config  
      - ./elk_data/ls/ls_data:/usr/share/logstash/data
      - ./elk_data/ls/ls_template:/usr/share/logstash/template
      - ./elk_data/ls/ls_pipeline:/usr/share/logstash/pipeline
      - ./elk_data/ls/ls_scripts:/user_scripts
      #- ./elk_data/ls/ls_logs:/usr/share/logstash/logs:ro
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    
  kibana:
    image: docker.elastic.co/kibana/kibana-oss:7.8.0
    container_name: kibana
    hostname: kibana
    depends_on:
      - es01
    ports:
      - 5601:5601
    environment:
      - SERVER_NAME=kibana_server
      - ELASTICSEARCH_HOSTS=http://es01:9200
      
  ngrok:
    image: wernight/ngrok
    container_name: chatbot_ngrok
    tty: true
    stdin_open: true
    ports:
      - "4040"
    depends_on:
      - jupyter
    command: ngrok http chatbot_jupyter:5000 
